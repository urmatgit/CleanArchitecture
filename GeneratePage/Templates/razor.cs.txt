using BlazorHero.CleanArchitecture.Application.Features.<FieldName>s.Queries.GetAll;
using BlazorHero.CleanArchitecture.Client.Extensions;
using BlazorHero.CleanArchitecture.Shared.Constants.Application;
using Microsoft.AspNetCore.Components;
using Microsoft.AspNetCore.SignalR.Client;
using MudBlazor;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using BlazorHero.CleanArchitecture.Application.Features.<FieldName>s.Commands.AddEdit;
using BlazorHero.CleanArchitecture.Client.Infrastructure.Managers.Catalog.<FieldName>;
using BlazorHero.CleanArchitecture.Shared.Constants.Permission;
using Microsoft.AspNetCore.Authorization;
using Microsoft.JSInterop;

namespace BlazorHero.CleanArchitecture.Client.Pages.Catalog.<FieldName>
{
    public partial class <FieldName>s
    {
        [Inject] private I<FieldName>Manager <FieldName>Manager { get; set; }

        [CascadingParameter] private HubConnection HubConnection { get; set; }

        private List<GetAll<FieldName>sResponse> _<!FieldName>List = new();
        private GetAll<FieldName>sResponse _<!FieldName> = new();
        private string _searchString = "";
        private bool _dense = false;
        private bool _striped = true;
        private bool _bordered = false;

        private ClaimsPrincipal _currentUser;
        private bool _canCreate<FieldName>s;
        private bool _canEdit<FieldName>s;
        private bool _canDelete<FieldName>s;
        private bool _canExport<FieldName>s;
        private bool _canSearch<FieldName>s;
        private bool _loaded;

        protected override async Task OnInitializedAsync()
        {
            _currentUser = await _authenticationManager.CurrentUser();
            _canCreate<FieldName>s = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.<FieldName>s.Create)).Succeeded;
            _canEdit<FieldName>s = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.<FieldName>s.Edit)).Succeeded;
            _canDelete<FieldName>s = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.<FieldName>s.Delete)).Succeeded;
            _canExport<FieldName>s = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.<FieldName>s.Export)).Succeeded;
            _canSearch<FieldName>s = (await _authorizationService.AuthorizeAsync(_currentUser, Permissions.<FieldName>s.Search)).Succeeded;

            await Get<FieldName>sAsync();
            _loaded = true;
            HubConnection = HubConnection.TryInitialize(_navigationManager);
            if (HubConnection.State == HubConnectionState.Disconnected)
            {
                await HubConnection.StartAsync();
            }
        }

        private async Task Get<FieldName>sAsync()
        {
            var response = await <FieldName>Manager.GetAllAsync();
            if (response.Succeeded)
            {
                _<!FieldName>List = response.Data.ToList();
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }

        private async Task Delete(int id)
        {
            string deleteContent = _localizer["Delete Content"];
            var parameters = new DialogParameters
            {
                {nameof(Shared.Dialogs.DeleteConfirmation.ContentText), string.Format(deleteContent, id)}
            };
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
            var dialog = _dialogService.Show<Shared.Dialogs.DeleteConfirmation>(_localizer["Delete"], parameters, options);
            var result = await dialog.Result;
            if (!result.Cancelled)
            {
                var response = await <FieldName>Manager.DeleteAsync(id);
                if (response.Succeeded)
                {
                    await Reset();
                    await HubConnection.SendAsync(ApplicationConstants.SignalR.SendUpdateDashboard);
                    _snackBar.Add(response.Messages[0], Severity.Success);
                }
                else
                {
                    await Reset();
                    foreach (var message in response.Messages)
                    {
                        _snackBar.Add(message, Severity.Error);
                    }
                }
            }
        }

        private async Task ExportToExcel()
        {
            var response = await <FieldName>Manager.ExportToExcelAsync(_searchString);
            if (response.Succeeded)
            {
                await _jsRuntime.InvokeVoidAsync("Download", new
                {
                    ByteArray = response.Data,
                    FileName = $"{nameof(<FieldName>s).ToLower()}_{DateTime.Now:ddMMyyyyHHmmss}.xlsx",
                    MimeType = ApplicationConstants.MimeTypes.OpenXml
                });
                _snackBar.Add(string.IsNullOrWhiteSpace(_searchString)
                    ? _localizer["<FieldName>s exported"]
                    : _localizer["Filtered <FieldName>s exported"], Severity.Success);
            }
            else
            {
                foreach (var message in response.Messages)
                {
                    _snackBar.Add(message, Severity.Error);
                }
            }
        }

        private async Task InvokeModal(int id = 0)
        {
            var parameters = new DialogParameters();
            if (id != 0)
            {
                _<!FieldName> = _<!FieldName>List.FirstOrDefault(c => c.Id == id);
                if (_<!FieldName> != null)
                {
                    parameters.Add(nameof(AddEdit<FieldName>Modal.AddEdit<FieldName>Model), new AddEdit<FieldName>Command
                    {
                        Id = _<!FieldName>.Id,
                        Name = _<!FieldName>.Name,
                        Description = _<!FieldName>.Description,
                        Tax = _<!FieldName>.Tax
                    });
                }
            }
            var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true, DisableBackdropClick = true };
            var dialog = _dialogService.Show<AddEdit<FieldName>Modal>(id == 0 ? _localizer["Create"] : _localizer["Edit"], parameters, options);
            var result = await dialog.Result;
            if (!result.Cancelled)
            {
                await Reset();
            }
        }

        private async Task Reset()
        {
            _<!FieldName> = new GetAll<FieldName>sResponse();
            await Get<FieldName>sAsync();
        }

        private bool Search(GetAll<FieldName>sResponse <!FieldName>)
        {
            if (string.IsNullOrWhiteSpace(_searchString)) return true;
            if (<!FieldName>.Name?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            {
                return true;
            }
            if (<!FieldName>.Description?.Contains(_searchString, StringComparison.OrdinalIgnoreCase) == true)
            {
                return true;
            }
            return false;
        }
    }
}