using BlazorHero.CleanArchitecture.Application.Features.<FieldName>s.Queries.GetAll;
using BlazorHero.CleanArchitecture.Client.Infrastructure.Extensions;
using BlazorHero.CleanArchitecture.Shared.Wrapper;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;
using BlazorHero.CleanArchitecture.Application.Features.<FieldName>s.Commands.AddEdit;

namespace BlazorHero.CleanArchitecture.Client.Infrastructure.Managers.Catalog.<FieldName>
{
    public class <FieldName>Manager : I<FieldName>Manager
    {
        private readonly HttpClient _httpClient;

        public <FieldName>Manager(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<IResult<string>> ExportToExcelAsync(string searchString = "")
        {
            var response = await _httpClient.GetAsync(string.IsNullOrWhiteSpace(searchString)
                ? Routes.<FieldName>sEndpoints.Export
                : Routes.<FieldName>sEndpoints.ExportFiltered(searchString));
            return await response.ToResult<string>();
        }

        public async Task<IResult<int>> DeleteAsync(int id)
        {
            var response = await _httpClient.DeleteAsync($"{Routes.<FieldName>sEndpoints.Delete}/{id}");
            return await response.ToResult<int>();
        }

        public async Task<IResult<List<GetAll<FieldName>sResponse>>> GetAllAsync()
        {
            var response = await _httpClient.GetAsync(Routes.<FieldName>sEndpoints.GetAll);
            return await response.ToResult<List<GetAll<FieldName>sResponse>>();
        }

        public async Task<IResult<int>> SaveAsync(AddEdit<FieldName>Command request)
        {
            var response = await _httpClient.PostAsJsonAsync(Routes.<FieldName>sEndpoints.Save, request);
            return await response.ToResult<int>();
        }
    }
}