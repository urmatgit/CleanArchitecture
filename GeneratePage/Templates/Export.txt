using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using BlazorHero.CleanArchitecture.Application.Extensions;
using BlazorHero.CleanArchitecture.Application.Interfaces.Repositories;
using BlazorHero.CleanArchitecture.Application.Interfaces.Services;
using BlazorHero.CleanArchitecture.Application.Specifications.Catalog;
using BlazorHero.CleanArchitecture.Domain.Entities.Catalog;
using BlazorHero.CleanArchitecture.Shared.Wrapper;
using MediatR;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Localization;

namespace BlazorHero.CleanArchitecture.Application.Features.<FieldName>s.Queries.Export
{
    public class Export<FieldName>sQuery : IRequest<Result<string>>
    {
        public string SearchString { get; set; }

        public Export<FieldName>sQuery(string searchString = "")
        {
            SearchString = searchString;
        }
    }

    internal class Export<FieldName>sQueryHandler : IRequestHandler<Export<FieldName>sQuery, Result<string>>
    {
        private readonly IExcelService _excelService;
        private readonly IUnitOfWork<int> _unitOfWork;
        private readonly IStringLocalizer<Export<FieldName>sQueryHandler> _localizer;

        public Export<FieldName>sQueryHandler(IExcelService excelService
            , IUnitOfWork<int> unitOfWork
            , IStringLocalizer<Export<FieldName>sQueryHandler> localizer)
        {
            _excelService = excelService;
            _unitOfWork = unitOfWork;
            _localizer = localizer;
        }

        public async Task<Result<string>> Handle(Export<FieldName>sQuery request, CancellationToken cancellationToken)
        {
            var brandFilterSpec = new <FieldName>FilterSpecification(request.SearchString);
            var brands = await _unitOfWork.Repository<<FieldName>>().Entities
                .Specify(brandFilterSpec)
                .ToListAsync(cancellationToken);
            var data = await _excelService.ExportAsync(brands, mappers: new Dictionary<string, Func<<FieldName>, object>>
            {
                { _localizer["Id"], item => item.Id },
                { _localizer["Name"], item => item.Name },
                { _localizer["Description"], item => item.Description }
                //, Other fields
                
            }, sheetName: _localizer["<FieldName>s"]);

            return await Result<string>.SuccessAsync(data: data);
        }
    }
}
